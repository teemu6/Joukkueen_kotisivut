{"ast":null,"code":"import _slicedToArray from \"/home/teemu/Omat/Koulu/kesaopinnot/web_ohjelmointi/harjtyo/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/teemu/Omat/Koulu/kesaopinnot/web_ohjelmointi/harjtyo/src/Stats.js\";\nimport React, { useState } from 'react';\nimport { Bar } from 'react-chartjs-2';\n\nconst Stats = ({\n  teamdata\n}) => {\n  const _useState = useState({}),\n        _useState2 = _slicedToArray(_useState, 2),\n        chartdata = _useState2[0],\n        setChartdata = _useState2[1];\n\n  const _useState3 = useState(true),\n        _useState4 = _slicedToArray(_useState3, 2),\n        firstload = _useState4[0],\n        setFirstload = _useState4[1];\n\n  const barOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    scales: {\n      scaleLabel: {\n        fontSize: 16\n      },\n      xAxes: [{\n        ticks: {\n          fontStyle: 'bold'\n        }\n      }],\n      yAxes: [{\n        ticks: {\n          fontStyle: 'bold'\n        }\n      }]\n    }\n  };\n\n  const showPoints = () => {\n    const players = teamdata.players.map((player, index) => {\n      let points = 0;\n\n      for (let i = 0; i < teamdata.matches.length; i++) {\n        for (let k = 0; k < teamdata.matches[i].scorers.length; k++) {\n          if (teamdata.matches[i].scorers[k] === player.id) {\n            points++;\n          }\n\n          if (teamdata.matches[i].assists[k] === player.id) {\n            points++;\n          }\n        }\n      }\n\n      return {\n        name: player.lname + \" \" + player.fname[0] + \".\",\n        points: points\n      };\n    });\n    players.sort((a, b) => a.points < b.points ? 1 : a.points > b.points ? -1 : 0);\n    let chartlabels = players.map(player => player.name);\n    let chartdata = players.map(player => player.points); //chartlabels = chartlabels.slice(0,10);\n    //chartdata = chartdata.slice(0,10);\n\n    let data = {\n      labels: chartlabels,\n      datasets: [{\n        label: \"Tehopisteet all-time\",\n        backgroundColor: 'rgb(255, 99, 132)',\n        borderColor: 'rgb(255, 99, 132)',\n        data: chartdata\n      }]\n    };\n    setChartdata(data); //document.getElementById(\"myCheck\").checked = true;\n  };\n\n  if (firstload) {\n    showPoints();\n    setFirstload(false);\n  }\n\n  ;\n  return React.createElement(\"div\", {\n    id: \"chartContainer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(Bar, {\n    data: chartdata,\n    options: barOptions,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }));\n};\n\nexport default Stats;","map":{"version":3,"sources":["/home/teemu/Omat/Koulu/kesaopinnot/web_ohjelmointi/harjtyo/src/Stats.js"],"names":["React","useState","Bar","Stats","teamdata","chartdata","setChartdata","firstload","setFirstload","barOptions","responsive","maintainAspectRatio","scales","scaleLabel","fontSize","xAxes","ticks","fontStyle","yAxes","showPoints","players","map","player","index","points","i","matches","length","k","scorers","id","assists","name","lname","fname","sort","a","b","chartlabels","data","labels","datasets","label","backgroundColor","borderColor"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { Bar } from 'react-chartjs-2';\n\nconst Stats = ({ teamdata }) => {\n  const [chartdata, setChartdata] = useState({});\n  const [firstload, setFirstload] = useState(true);\n  const barOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    scales: {\n      scaleLabel: { fontSize: 16 },\n      xAxes: [\n        {\n          ticks: {\n            fontStyle: 'bold'\n          }\n        }\n      ],\n      yAxes: [\n        {\n          ticks: {\n            fontStyle: 'bold'\n          }\n        }\n      ]\n    }\n  };\n  const showPoints = () => {\n    const players = teamdata.players.map((player, index) => {\n      let points = 0;\n      for (let i = 0; i < teamdata.matches.length; i++) {\n        for (let k = 0; k < teamdata.matches[i].scorers.length; k++) {\n          if (teamdata.matches[i].scorers[k] === player.id) {\n            points++;\n          }\n          if (teamdata.matches[i].assists[k] === player.id) {\n            points++;\n          }\n        }\n      }\n      return ({\n        name: player.lname + \" \" + player.fname[0] + \".\",\n        points: points\n      });\n    });\n    players.sort((a, b) => (a.points < b.points) ? 1 : (a.points > b.points) ? -1 : 0);\n\n    let chartlabels = players.map((player) => player.name);\n    let chartdata = players.map((player) => player.points);\n    //chartlabels = chartlabels.slice(0,10);\n    //chartdata = chartdata.slice(0,10);\n    let data = {\n      labels: chartlabels,\n      datasets: [{\n        label: \"Tehopisteet all-time\",\n        backgroundColor: 'rgb(255, 99, 132)',\n        borderColor: 'rgb(255, 99, 132)',\n        data: chartdata,\n      }]\n    };\n    setChartdata(data);\n    //document.getElementById(\"myCheck\").checked = true;\n  }\n  if (firstload) {\n    showPoints();\n    setFirstload(false);\n  };\n\n  return (<div id=\"chartContainer\">\n    <Bar data={chartdata} options={barOptions} />\n  </div>\n  );\n}\n\nexport default Stats;"]},"metadata":{},"sourceType":"module"}