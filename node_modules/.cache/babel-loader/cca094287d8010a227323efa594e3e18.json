{"ast":null,"code":"var _jsxFileName = \"/home/teemu/Projects/Joukkueen_kotisivut/src/Practises.js\";\nimport React, { useState } from 'react';\n/* Component for Practises-page contents */\n\nconst Practises = ({\n  teamdata\n}) => {\n  //state to keep record of table rows that are \"opened\" to display participants for practises\n  const [rowInfo, setRowInfo] = useState( //initializing the state: create a array that is the length of total practise rows\n  //then set the data as boolean type \"false\" (not shown by default) for each element\n  Array(teamdata.practises.length).fill(false));\n  /* \n  Handler that is called on a row click. \n  Toggles state of participants list (display/hide)\n  */\n\n  const Toggle = index => {\n    //copy the current state to a variable\n    let rowInfos = [...rowInfo]; //reverse the boolean on the array element stated by index parameter\n\n    rowInfos[index] = !rowInfos[index]; //update state with the changes\n\n    setRowInfo(rowInfos);\n  };\n  /* \n  Mapping that creates the rows of practises from raw data.\n  .slice(0) -creates a copy of the array, because .reverse mutates original\n  .reverse -changes the order of practises so that the newest are on top of table\n  */\n\n\n  const rows = teamdata.practises.slice(0).reverse().map((practise, index) => {\n    const participants = [];\n\n    for (let i = 0; i < practise.participants.length; i++) {\n      //participant is only listed as \"id\" in \"practise.participants\"-array\n      //player data must be fetched from object-array \"teamdata.players\" that matches the same player id\n      let player = teamdata.players.find(object => object.id === practise.participants[i]); //push the list element into array, \"key\" must be unique for React requirements\n      //1participant_of2 for example, first participant of practise id 2 <- always creates unique key string\n\n      participants.push( /*#__PURE__*/React.createElement(\"li\", {\n        key: i + \"participant_of\" + practise.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 25\n        }\n      }, player.lname + \" \" + player.fname[0] + \".\"));\n    }\n\n    return /*#__PURE__*/React.createElement(\"tr\", {\n      key: \"row\" + index,\n      onClick: () => Toggle(index),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }\n    }, practise.date), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }\n    }, practise.location), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }\n    }, practise.participants.length, /*#__PURE__*/React.createElement(\"div\", {\n      className: rowInfo[index] ? \"Show\" : \"Hide\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"ul\", {\n      className: \"Participants\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }\n    }, participants))));\n  });\n  return /*#__PURE__*/React.createElement(\"table\", {\n    className: \"Practises\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 11\n    }\n  }, \"P\\xE4iv\\xE4m\\xE4\\xE4r\\xE4\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 11\n    }\n  }, \"Paikka\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 11\n    }\n  }, \"Osallistujat\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }, rows));\n};\n\nexport default Practises;","map":{"version":3,"sources":["/home/teemu/Projects/Joukkueen_kotisivut/src/Practises.js"],"names":["React","useState","Practises","teamdata","rowInfo","setRowInfo","Array","practises","length","fill","Toggle","index","rowInfos","rows","slice","reverse","map","practise","participants","i","player","players","find","object","id","push","lname","fname","date","location"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\n\n/* Component for Practises-page contents */\nconst Practises = ({ teamdata }) => {\n  //state to keep record of table rows that are \"opened\" to display participants for practises\n  const [rowInfo, setRowInfo] = useState(\n    //initializing the state: create a array that is the length of total practise rows\n    //then set the data as boolean type \"false\" (not shown by default) for each element\n    Array(teamdata.practises.length).fill(false)\n  );\n\n  /* \n  Handler that is called on a row click. \n  Toggles state of participants list (display/hide)\n  */\n  const Toggle = index => {\n    //copy the current state to a variable\n    let rowInfos = [...rowInfo];\n    //reverse the boolean on the array element stated by index parameter\n    rowInfos[index] = !rowInfos[index];\n    //update state with the changes\n    setRowInfo(rowInfos);\n  };\n\n  /* \n  Mapping that creates the rows of practises from raw data.\n  .slice(0) -creates a copy of the array, because .reverse mutates original\n  .reverse -changes the order of practises so that the newest are on top of table\n  */\n  const rows = teamdata.practises.slice(0).reverse().map((practise, index) => {\n\n    const participants = [];\n    for (let i = 0; i < practise.participants.length; i++) {\n      //participant is only listed as \"id\" in \"practise.participants\"-array\n      //player data must be fetched from object-array \"teamdata.players\" that matches the same player id\n      let player = teamdata.players.find(object => object.id === practise.participants[i]);\n      //push the list element into array, \"key\" must be unique for React requirements\n      //1participant_of2 for example, first participant of practise id 2 <- always creates unique key string\n      participants.push(<li key={i + \"participant_of\" + practise.id}>{player.lname + \" \" + player.fname[0] + \".\"}</li>);\n    }\n\n    return (\n      <tr key={\"row\" + index} onClick={() => Toggle(index)}>\n        <td>\n          {practise.date}\n        </td>\n        <td >\n          {practise.location}\n        </td>\n        <td>\n          {practise.participants.length}\n          <div className={rowInfo[index] ? \"Show\" : \"Hide\"}>\n            <ul className=\"Participants\">{participants}</ul>\n          </div>\n        </td>\n      </tr>\n    );\n  });\n\n  return (\n    <table className=\"Practises\">\n      <thead>\n        <tr>\n          <th>Päivämäärä</th>\n          <th>Paikka</th>\n          <th>Osallistujat</th>\n        </tr>\n      </thead>\n      <tbody>\n        {rows}\n      </tbody>\n    </table>\n  );\n}\n\nexport default Practises;"]},"metadata":{},"sourceType":"module"}